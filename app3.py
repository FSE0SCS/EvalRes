import streamlit as st
import pandas as pd
import io

# --- Configuraci√≥n General ---
st.set_page_config(
    page_title="Evaluaci√≥n de Notas de Residentes 1.0 ‚Äì F.S.E. ‚Äì S.C.S.",
    page_icon="üè•",
    layout="wide"
)

# --- Contrase√±a de Acceso ---
PASSWORD = "residentes2025"

# --- Datos Maestros ---
# Mapeo de Direcciones/Gerencias a C√≥digos para el nombre de la hoja Excel
CODIGOS_DIRECCION = {
    "DIRECCI√ìN GERENCIA HOSPITAL DOCTOR NEGRIN": "HUGCNEGRIN",
    "DIRECCI√ìN GERENCIA COMPLEJO HOSPITALARIO UNIVERSITARIO Y MATERNO INFANTIL": "CHUIMI",
    "DIRECCI√ìN GERENCIA COMPLEJO HOSPITALARIO UNIVERSITARIO DE CANARIAS": "CHUC",
    "DIRECCI√ìN GERENCIA HOSPITAL NUESTRA SE√ëORA DE CANDELARIA": "HUSNC",
    "GERENCIA DE ATENCI√ìN PRIMARIA DE GRAN CANARIA": "GAPGC",
    "GERENCIA DE ATENCI√ìN PRIMARIA DE TENERIFE NORTE": "GAPTF Norte",
    "GERENCIA DE ATENCI√ìN PRIMARIA DE TENERIFE SUR": "GAPTF Sur",
    "GERENCIA DE SERVICIOS SANITARIOS DE FUERTEVENTURA": "GSSFV",
    "GERENCIA DE SERVICIOS SANITARIOS DE LANZAROTE": "GSSLZ",
    "GERENCIA DE SERVICIOS SANITARIOS DE LA PALMA": "GSSLP"
}

# Especialidades por Direcci√≥n/Gerencia
ESPECIALIDADES_POR_DIRECCION = {
    "DIRECCI√ìN GERENCIA HOSPITAL DOCTOR NEGRIN": [
        "ALERGOLOG√çA", "AN√ÅLISIS CL√çNICOS", "ANATOM√çA PATOL√ìGICA", "ANESTESIOLOG√çA Y REANIMACI√ìN",
        "ANGIOLOG√çA Y CIRUG√çA VASCULAR", "APARATO DIGESTIVO", "CARDIOLOG√çA",
        "CIRUG√çA CARDIOVASCULAR", "CIRUG√çA GENERAL Y DEL APARATO DIGESTIVO",
        "CIRUG√çA ORTOP√âDICA Y TRAUMATOLOG√çA", "CIRUG√çA PL√ÅSTICA EST√âTICA Y REPARADORA",
        "CIRUG√çA TOR√ÅCICA", "DERMATOLOG√çA M√âDICO-QUIR√öRGICA Y VENEREOLOG√çA",
        "ENDOCRINOLOG√çA Y NUTRICI√ìN", "ENFERMER√çA DEL TRABAJO", "FARMACIA HOSPITALARIA",
        "HEMATOLOG√çA Y HEMOTERAPIA", "INMUNOLOG√çA", "MEDICINA F√çSICA Y REHABILITACI√ìN",
        "MEDICINA INTENSIVA", "MEDICINA INTERNA", "MICROBIOLOG√çA Y PARASITOLOG√çA",
        "NEFROLOG√çA", "NEUMOLOG√çA", "NEUROCIRUG√çA", "NEUROFISIOLOG√çA CL√çNICA", "NEUROLOG√çA",
        "OFTALMOLOG√çA", "ONCOLOG√çA M√âDICA", "ONCOLOG√çA RADIOTER√ÅPICA", "OTORRINOLARINGOLOG√çA",
        "RADIODIAGN√ìSTICO", "RADIOF√çSICA HOSPITALARIA", "REUMATOLOG√çA", "UROLOG√çA"
    ],
    "DIRECCI√ìN GERENCIA COMPLEJO HOSPITALARIO UNIVERSITARIO Y MATERNO INFANTIL": [
        "ANATOM√çA PATOL√ìGICA", "ANESTESIOLOG√çA Y REANIMACI√ìN", "ANGIOLOG√çA Y CIRUG√çA VASCULAR",
        "APARATO DIGESTIVO", "BIOQU√çMICA CL√çNICA", "CARDIOLOG√çA", "CIRUG√çA GENERAL Y DEL APARATO DIGESTIVO",
        "CIRUG√çA ORTOP√âDICA Y TRAUMATOLOG√çA", "CIRUG√çA PEDI√ÅTRICA",
        "DERMATOLOG√çA M√âDICO-QUIR√öRGICA Y VENEREOLOG√çA", "ENDOCRINOLOG√çA Y NUTRICI√ìN",
        "ENFERMER√çA DEL TRABAJO", "ENFERMER√çA OBST√âTRICO GINECOLOGICA", "ENFERMER√çA PEDIATRICA",
        "FARMACIA HOSPITALARIA", "HEMATOLOG√çA Y HEMOTERAPIA", "MEDICINA F√çSICA Y REHABILITACI√ìN",
        "MEDICINA INTENSIVA", "MEDICINA INTERNA", "MEDICINA NUCLEAR",
        "MICROBIOLOG√çA Y PARASITOLOG√çA", "NEFROLOG√çA", "NEUMOLOG√çA", "NEUROCIRUG√çA",
        "NEUROFISIOLOG√çA CL√çNICA", "NEUROLOG√çA", "OFTALMOLOG√çA", "ONCOLOG√çA M√âDICA",
        "OTORRINOLARINGOLOG√çA", "RADIODIAGN√ìSTICO", "REUMATOLOG√çA", "UROLOG√çA"
    ],
    "DIRECCI√ìN GERENCIA COMPLEJO HOSPITALARIO UNIVERSITARIO DE CANARIAS": [
        "ANATOM√çA PATOL√ìGICA", "ANESTESIOLOG√çA Y REANIMACI√ìN", "ANGIOLOG√çA Y CIRUG√çA VASCULAR",
        "APARATO DIGESTIVO", "BIOQU√çMICA CL√çNICA", "CARDIOLOG√çA", "CIRUG√çA GENERAL Y DEL APARATO DIGESTIVO",
        "CIRUG√çA ORAL Y MAXILOFACIAL", "CIRUG√çA ORTOP√âDICA Y TRAUMATOLOG√çA",
        "CIRUG√çA PL√ÅSTICA EST√âTICA Y REPARADORA", "DERMATOLOG√çA M√âDICO-QUIR√öRGICA Y VENEREOLOG√çA",
        "ENDOCRINOLOG√çA Y NUTRICI√ìN", "ENFERMER√çA DE SALUD MENTAL", "ENFERMER√çA DEL TRABAJO",
        "ENFERMER√çA OBST√âTRICO GINECOLOGICA", "ENFERMER√çA PEDIATRICA", "FARMACIA HOSPITALARIA",
        "FARMACOLOG√çA CL√çNICA", "HEMATOLOG√çA Y HEMOTERAPIA", "MEDICINA F√çSICA Y REHABILITACI√ìN",
        "MEDICINA INTENSIVA", "MEDICINA INTERNA", "MEDICINA NUCLEAR",
        "MICROBIOLOG√çA Y PARASITOLOG√çA", "NEFROLOG√çA", "NEUMOLOG√çA", "NEUROCIRUG√çA", "NEUROLOG√çA",
        "OBSTETRICIA Y GINECOLOG√çA", "OFTALMOLOG√çA", "ONCOLOG√çA M√âDICA",
        "ONCOLOG√çA RADIOTER√ÅPICA", "OTORRINOLARINGOLOG√çA", "RADIODIAGN√ìSTICO",
        "RADIOF√çSICA HOSPITALARIA", "REUMATOLOG√çA", "UROLOG√çA"
    ],
    "DIRECCI√ìN GERENCIA HOSPITAL NUESTRA SE√ëORA DE CANDELARIA": [
        "ALERGOLOG√çA", "AN√ÅLISIS CL√çNICOS", "ANESTESIOLOG√çA Y REANIMACI√ìN", "APARATO DIGESTIVO",
        "CARDIOLOG√çA", "CIRUG√çA GENERAL Y DEL APARATO DIGESTIVO", "CIRUG√çA ORAL Y MAXILOFACIAL",
        "CIRUG√çA ORTOP√âDICA Y TRAUMATOLOG√çA", "DERMATOLOG√çA M√âDICO-QUIR√öRGICA Y VENEREOLOG√çA",
        "ENDOCRINOLOG√çA Y NUTRICI√ìN", "ENFERMER√çA DEL TRABAJO", "ENFERMER√çA OBST√âTRICO GINECOLOGICA",
        "ENFERMER√çA PEDIATRICA", "FARMACIA HOSPITALARIA", "HEMATOLOG√çA Y HEMOTERAPIA",
        "MEDICINA F√çSICA Y REHABILITACI√ìN", "MEDICINA INTENSIVA", "MEDICINA INTERNA",
        "MEDICINA NUCLEAR", "MICROBIOLOG√çA Y PARASITOLOG√çA", "NEFROLOG√çA", "NEUMOLOG√çA",
        "NEUROCIRUG√çA", "NEUROFISIOLOG√çA CL√çNICA", "NEUROLOG√çA", "OBSTETRICIA Y GINECOLOG√çA",
        "OFTALMOLOG√çA", "ONCOLOG√çA M√âDICA", "ONCOLOG√çA RADIOTER√ÅPICA", "OTORRINOLARINGOLOG√çA",
        "RADIODIAGN√ìSTICO", "RADIOF√çSICA HOSPITALARIA", "REUMATOLOG√çA", "UROLOG√çA"
    ],
    "GERENCIA DE ATENCI√ìN PRIMARIA DE GRAN CANARIA": [
        "MEDICINA FAMILIAR Y COMUNITARIA", "ENFERMER√çA FAMILIAR Y COMUNITARIA"
    ],
    "GERENCIA DE ATENCI√ìN PRIMARIA DE TENERIFE NORTE": [
        "MEDICINA FAMILIAR Y COMUNITARIA", "ENFERMER√çA FAMILIAR Y COMUNITARIA"
    ],
    "GERENCIA DE ATENCI√ìN PRIMARIA DE TENERIFE SUR": [
        "MEDICINA FAMILIAR Y COMUNITARIA", "ENFERMER√çA FAMILIAR Y COMUNITARIA"
    ],
    "GERENCIA DE SERVICIOS SANITARIOS DE FUERTEVENTURA": [
        "MEDICINA FAMILIAR Y COMUNITARIA", "ENFERMER√çA FAMILIAR Y COMUNITARIA",
        "ENFERMER√çA OBST√âTRICO GINECOLOGICA"
    ],
    "GERENCIA DE SERVICIOS SANITARIOS DE LANZAROTE": [
        "CIRUG√çA ORTOP√âDICA Y TRAUMATOLOG√çA", "ENFERMER√çA FAMILIAR Y COMUNITARIA",
        "ENFERMERIA GERIATRICA", "ENFERMER√çA OBST√âTRICO GINECOLOGICA",
        "ENFERMER√çA PEDIATRICA", "GERIATRIA", "MEDICINA FAMILIAR Y COMUNITARIA",
        "MEDICINA INTERNA", "PEDIATRIA Y AREAS ESPECIFICAS"
    ],
    "GERENCIA DE SERVICIOS SANITARIOS DE LA PALMA": [
        "MEDICINA FAMILIAR Y COMUNITARIA", "ENFERMER√çA FAMILIAR Y COMUNITARIA"
    ]
}

# --- Funciones Auxiliares ---
def calculate_average(notes):
    """Calcula la media de una lista de notas, ignorando None, NaN o valores vac√≠os."""
    # Filter out None, NaN, and empty strings. Convert to float if not already.
    valid_notes = [float(note) for note in notes if note is not None and pd.notna(note) and note != ""]
    if not valid_notes:
        return None
    return sum(valid_notes) / len(valid_notes)

def reset_selection_page():
    """Reinicia el estado de la sesi√≥n para volver a la p√°gina de selecci√≥n."""
    st.session_state.current_step = 2
    st.session_state.area_selected = None
    st.session_state.direccion_selected = None
    st.session_state.confirm_selection = False

def login_successful():
    """Marca la sesi√≥n como logueada."""
    st.session_state.logged_in = True

# --- Interfaz de Usuario ---

if 'logged_in' not in st.session_state:
    st.session_state.logged_in = False
if 'current_step' not in st.session_state:
    st.session_state.current_step = 1
if 'area_selected' not in st.session_state:
    st.session_state.area_selected = None
if 'direccion_selected' not in st.session_state:
    st.session_state.direccion_selected = None
if 'confirm_selection' not in st.session_state:
    st.session_state.confirm_selection = False

# --- Control de Acceso ---
if not st.session_state.logged_in:
    st.title("üîê Acceso al Aplicativo de Evaluaci√≥n de Notas")
    st.write("Por favor, introduce la contrase√±a para continuar.")
    password_input = st.text_input("Contrase√±a", type="password", key="password_input")
    if st.button("Iniciar Sesi√≥n"):
        if password_input == PASSWORD:
            login_successful()
            st.rerun()
        else:
            st.error("Contrase√±a incorrecta. Por favor, int√©ntalo de nuevo.")
    st.markdown("---")
    st.markdown("##### Historial de Versiones")
    st.markdown("- **Versi√≥n 1.0 (2025-07-11):** Implementaci√≥n inicial del flujo de trabajo completo, control de acceso y generaci√≥n de Excel.")
    st.stop()


# --- Flujo del Programa ---
st.title("Evaluaci√≥n de Notas de Residentes 1.0 ‚Äì F.S.E. ‚Äì S.C.S. üè•")
st.markdown("---")

# 1¬∫: Pantalla de bienvenida
if st.session_state.current_step == 1:
    st.header("Bienvenido al programa de Evaluaci√≥n de Notas de Residentes")
    st.write("Haz clic en 'Iniciar Aplicativo' para comenzar el proceso.")
    if st.button("Iniciar Aplicativo"):
        st.session_state.current_step = 2
        st.rerun()

# 2¬∫: Selecci√≥n de √Årea y Direcci√≥n/Gerencia
elif st.session_state.current_step == 2:
    st.header("Paso 1: Selecci√≥n de √Årea y Direcci√≥n/Gerencia")

    # Primer campo desplegable: SELECCIONE AREA
    area_options = ["HOSPITALARIA", "PRIMARIA"]
    st.session_state.area_selected = st.selectbox(
        "**SELECCIONE √ÅREA**",
        options=[""] + area_options,
        index=area_options.index(st.session_state.area_selected) + 1 if st.session_state.area_selected else 0,
        key="area_selector"
    )

    # Segundo campo desplegable: SELECCIONE DIRECCION / GERENCIA
    direccion_options = []
    if st.session_state.area_selected == "HOSPITALARIA":
        direccion_options = [
            "DIRECCI√ìN GERENCIA HOSPITAL DOCTOR NEGRIN",
            "DIRECCI√ìN GERENCIA COMPLEJO HOSPITALARIO UNIVERSITARIO Y MATERNO INFANTIL",
            "DIRECCI√ìN GERENCIA COMPLEJO HOSPITALARIO UNIVERSITARIO DE CANARIAS",
            "DIRECCI√ìN GERENCIA HOSPITAL NUESTRA SE√ëORA DE CANDELARIA"
        ]
    elif st.session_state.area_selected == "PRIMARIA":
        direccion_options = [
            "GERENCIA DE ATENCI√ìN PRIMARIA DE GRAN CANARIA",
            "GERENCIA DE ATENCI√ìN PRIMARIA DE TENERIFE NORTE",
            "GERENCIA DE ATENCI√ìN PRIMARIA DE TENERIFE SUR",
            "GERENCIA DE SERVICIOS SANITARIOS DE FUERTEVENTURA",
            "GERENCIA DE SERVICIOS SANITARIOS DE LANZAROTE",
            "GERENCIA DE SERVICIOS SANITARIOS DE LA PALMA"
        ]

    st.session_state.direccion_selected = st.selectbox(
        "**SELECCIONE DIRECCI√ìN / GERENCIA**",
        options=[""] + direccion_options,
        index=direccion_options.index(st.session_state.direccion_selected) + 1 if st.session_state.direccion_selected and st.session_state.direccion_selected in direccion_options else 0,
        key="direccion_selector"
    )

    if st.button("Siguiente"):
        if st.session_state.area_selected and st.session_state.direccion_selected:
            st.session_state.current_step = 3
            st.session_state.confirm_selection = False # Reset confirmation for next step
            st.rerun()
        else:
            st.warning("Por favor, selecciona un √Årea y una Direcci√≥n/Gerencia para continuar.")

# 3¬∫: Mensaje de confirmaci√≥n
elif st.session_state.current_step == 3:
    st.header("Paso 2: Confirmaci√≥n de Datos")
    # Modificaci√≥n para colorear el texto
    st.markdown(f"**AREA :** <span style='color: #28a745;'>{st.session_state.area_selected}</span>", unsafe_allow_html=True) # Verde
    st.markdown(f"**DIRECCION/GERENCIA :** <span style='color: #007bff;'>{st.session_state.direccion_selected}</span>", unsafe_allow_html=True) # Azul
    st.markdown("**¬øDesea confirmar estos datos?**")

    col_si, col_atras = st.columns(2)
    with col_si:
        if st.button("SI", key="confirm_si"):
            st.session_state.current_step = 5
            st.session_state.confirm_selection = True
            st.rerun()
    with col_atras:
        if st.button("ATR√ÅS", key="confirm_atras"):
            reset_selection_page()
            st.rerun()

# 4¬∫: Volver al paso 2 (manejado por el bot√≥n "ATR√ÅS" en el paso 3)
# Este paso se maneja directamente cambiando st.session_state.current_step a 2.

# 5¬∫: Zona de trabajo - Introducci√≥n de datos
elif st.session_state.current_step == 5:
    st.header("Paso 3: Introducci√≥n de Datos de Residentes")
    st.write(f"Direcci√≥n/Gerencia seleccionada: **{st.session_state.direccion_selected}**")

    especialidades_para_rellenar = ESPECIALIDADES_POR_DIRECCION.get(st.session_state.direccion_selected, [])

    if not especialidades_para_rellenar:
        st.warning("No se encontraron especialidades para la Direcci√≥n/Gerencia seleccionada. Por favor, vuelve al paso anterior.")
        if st.button("Volver al Paso 2"):
            reset_selection_page()
            st.rerun()
        st.stop()

    # Estructura para almacenar los datos
    # {'Especialidad': {'num_residentes': val, 'R1': [n1,n2,n3], 'R2': [n1,n2,n3], ...}}
    if 'data_input' not in st.session_state or st.session_state.data_input_direccion != st.session_state.direccion_selected:
        st.session_state.data_input = {
            esp: {'num_residentes': None, 'R1': [None, None, None], 'R2': [None, None, None],
                  'R3': [None, None, None], 'R4': [None, None, None], 'R5': [None, None, None]}
            for esp in especialidades_para_rellenar
        }
        st.session_state.data_input_direccion = st.session_state.direccion_selected


    st.markdown("### Rellene los campos a continuaci√≥n para cada especialidad:")
    st.info("üí° **Importante:** Para las notas, si no va a rellenar las 3 notas m√°s altas, deje los campos vac√≠os. No ponga '0', ya que afectar√≠a a la media. Las notas deben estar entre 0 y 10, con hasta 2 decimales.")

    # Crear una tabla interactiva para la entrada de datos
    input_data_df = pd.DataFrame(
        {
            "Especialidad": especialidades_para_rellenar,
            "N¬∫ Residentes Aptos": [st.session_state.data_input[esp]['num_residentes'] for esp in especialidades_para_rellenar],
            "R1 Nota 1": [st.session_state.data_input[esp]['R1'][0] for esp in especialidades_para_rellenar],
            "R1 Nota 2": [st.session_state.data_input[esp]['R1'][1] for esp in especialidades_para_rellenar],
            "R1 Nota 3": [st.session_state.data_input[esp]['R1'][2] for esp in especialidades_para_rellenar],
            "R2 Nota 1": [st.session_state.data_input[esp]['R2'][0] for esp in especialidades_para_rellenar],
            "R2 Nota 2": [st.session_state.data_input[esp]['R2'][1] for esp in especialidades_para_rellenar],
            "R2 Nota 3": [st.session_state.data_input[esp]['R2'][2] for esp in especialidades_para_rellenar],
            "R3 Nota 1": [st.session_state.data_input[esp]['R3'][0] for esp in especialidades_para_rellenar],
            "R3 Nota 2": [st.session_state.data_input[esp]['R3'][1] for esp in especialidades_para_rellenar],
            "R3 Nota 3": [st.session_state.data_input[esp]['R3'][2] for esp in especialidades_para_rellenar],
            "R4 Nota 1": [st.session_state.data_input[esp]['R4'][0] for esp in especialidades_para_rellenar],
            "R4 Nota 2": [st.session_state.data_input[esp]['R4'][1] for esp in especialidades_para_rellenar],
            "R4 Nota 3": [st.session_state.data_input[esp]['R4'][2] for esp in especialidades_para_rellenar],
            "R5 Nota 1": [st.session_state.data_input[esp]['R5'][0] for esp in especialidades_para_rellenar],
            "R5 Nota 2": [st.session_state.data_input[esp]['R5'][1] for esp in especialidades_para_rellenar],
            "R5 Nota 3": [st.session_state.data_input[esp]['R5'][2] for esp in especialidades_para_rellenar],
        }
    )

    edited_df = st.data_editor(
        input_data_df,
        column_config={
            "Especialidad": st.column_config.Column("Especialidad", disabled=True),
            "N¬∫ Residentes Aptos": st.column_config.NumberColumn(
                "N¬∫ Residentes Aptos en la Evaluaci√≥n final de residencia",
                min_value=1,
                format="%d",
                help="Valor entero, positivo y obligatorio."
            ),
            "R1 Nota 1": st.column_config.NumberColumn("R1 Nota 1", min_value=0.0, max_value=10.0, format="%.2f"),
            "R1 Nota 2": st.column_config.NumberColumn("R1 Nota 2", min_value=0.0, max_value=10.0, format="%.2f"),
            "R1 Nota 3": st.column_config.NumberColumn("R1 Nota 3", min_value=0.0, max_value=10.0, format="%.2f"),
            "R2 Nota 1": st.column_config.NumberColumn("R2 Nota 1", min_value=0.0, max_value=10.0, format="%.2f"),
            "R2 Nota 2": st.column_config.NumberColumn("R2 Nota 2", min_value=0.0, max_value=10.0, format="%.2f"),
            "R2 Nota 3": st.column_config.NumberColumn("R2 Nota 3", min_value=0.0, max_value=10.0, format="%.2f"),
            "R3 Nota 1": st.column_config.NumberColumn("R3 Nota 1", min_value=0.0, max_value=10.0, format="%.2f"),
            "R3 Nota 2": st.column_config.NumberColumn("R3 Nota 2", min_value=0.0, max_value=10.0, format="%.2f"),
            "R3 Nota 3": st.column_config.NumberColumn("R3 Nota 3", min_value=0.0, max_value=10.0, format="%.2f"),
            "R4 Nota 1": st.column_config.NumberColumn("R4 Nota 1", min_value=0.0, max_value=10.0, format="%.2f"),
            "R4 Nota 2": st.column_config.NumberColumn("R4 Nota 2", min_value=0.0, max_value=10.0, format="%.2f"),
            "R4 Nota 3": st.column_config.NumberColumn("R4 Nota 3", min_value=0.0, max_value=10.0, format="%.2f"),
            "R5 Nota 1": st.column_config.NumberColumn("R5 Nota 1", min_value=0.0, max_value=10.0, format="%.2f"),
            "R5 Nota 2": st.column_config.NumberColumn("R5 Nota 2", min_value=0.0, max_value=10.0, format="%.2f"),
            "R5 Nota 3": st.column_config.NumberColumn("R5 Nota 3", min_value=0.0, max_value=10.0, format="%.2f"),
        },
        num_rows="dynamic",
        use_container_width=True
    )

    # Actualizar st.session_state.data_input con los valores editados
    for i, esp in enumerate(especialidades_para_rellenar):
        st.session_state.data_input[esp]['num_residentes'] = edited_df.iloc[i]["N¬∫ Residentes Aptos"]
        st.session_state.data_input[esp]['R1'] = [edited_df.iloc[i]["R1 Nota 1"], edited_df.iloc[i]["R1 Nota 2"], edited_df.iloc[i]["R1 Nota 3"]]
        st.session_state.data_input[esp]['R2'] = [edited_df.iloc[i]["R2 Nota 1"], edited_df.iloc[i]["R2 Nota 2"], edited_df.iloc[i]["R2 Nota 3"]]
        st.session_state.data_input[esp]['R3'] = [edited_df.iloc[i]["R3 Nota 1"], edited_df.iloc[i]["R3 Nota 2"], edited_df.iloc[i]["R3 Nota 3"]]
        st.session_state.data_input[esp]['R4'] = [edited_df.iloc[i]["R4 Nota 1"], edited_df.iloc[i]["R4 Nota 2"], edited_df.iloc[i]["R4 Nota 3"]]
        st.session_state.data_input[esp]['R5'] = [edited_df.iloc[i]["R5 Nota 1"], edited_df.iloc[i]["R5 Nota 2"], edited_df.iloc[i]["R5 Nota 3"]]

    col_generate, col_back_step5 = st.columns(2)

    with col_generate:
        if st.button("GENERAR"):
            # Validaci√≥n antes de generar
            validation_errors = []
            for esp, data in st.session_state.data_input.items():
                # Validar N¬∫ Residentes Aptos
                if data['num_residentes'] is None or pd.isna(data['num_residentes']) or not isinstance(data['num_residentes'], (int, float)) or data['num_residentes'] <= 0:
                    validation_errors.append(f"En '{esp}', el 'N¬∫ Residentes Aptos' debe ser un n√∫mero entero positivo y no puede estar vac√≠o.")

                # Validar notas (entre 0 y 10, hasta 2 decimales)
                for r_key in ['R1', 'R2', 'R3', 'R4', 'R5']:
                    for i, note in enumerate(data[r_key]):
                        # Only validate if the note is not None/NaN (i.e., if a value was entered)
                        if note is not None and pd.notna(note):
                            if not isinstance(note, (int, float)) or not (0 <= note <= 10):
                                validation_errors.append(f"En '{esp}', Nota {i+1} de {r_key}: El valor '{note}' no es v√°lido. Las notas deben ser n√∫meros entre 0 y 10.")

            if validation_errors:
                for error in validation_errors:
                    st.error(error)
                st.warning("Por favor, corrige los errores para poder generar el informe.")
            else:
                # Calcular medias y preparar DataFrame para Excel
                results = []
                n_residentes_data = [] # Data for the new sheet
                for esp, data in st.session_state.data_input.items():
                    row = {"Especialidad": esp}
                    for r_num in range(1, 6):
                        r_key = f"R{r_num}"
                        notes = data[r_key]
                        avg = calculate_average(notes)
                        row[f"Media {r_key}"] = f"{avg:.2f}" if avg is not None else "" # Formatear a 2 decimales

                    results.append(row)
                    n_residentes_data.append({"Especialidad": esp, "N¬∫ Residentes Aptos": data['num_residentes']}) # Collect data for new sheet

                output_df = pd.DataFrame(results)

                # Renombrar columnas para el Excel final
                output_df.columns = ["Especialidad", "Media R1", "Media R2", "Media R3", "Media R4", "Media R5"]

                # Crear DataFrame para la nueva hoja "N_Residentes"
                n_residentes_df = pd.DataFrame(n_residentes_data)

                # Generar archivo Excel en memoria
                output = io.BytesIO()
                excel_sheet_name = CODIGOS_DIRECCION.get(st.session_state.direccion_selected, "Resultados")
                with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                    # Escribir la primera hoja (la original)
                    output_df.to_excel(writer, sheet_name=excel_sheet_name, index=False)
                    # Escribir la nueva hoja "N_Residentes"
                    n_residentes_df.to_excel(writer, sheet_name="N_Residentes", index=False)
                output.seek(0) # Rewind to the beginning of the stream

                st.session_state.excel_output = output
                st.session_state.excel_filename = f"Evaluacion_Notas_{excel_sheet_name}.xlsx"
                st.session_state.current_step = 6
                st.rerun()

    with col_back_step5:
        if st.button("ATR√ÅS", key="back_from_step5"):
            st.session_state.current_step = 3
            st.rerun()


# 6¬∫: Descarga y mensaje de env√≠o por correo
elif st.session_state.current_step == 6:
    st.header("Paso 4: Descarga del Informe")
    st.success("¬°El informe se ha generado con √©xito! Puedes descargarlo ahora.")

    if 'excel_output' in st.session_state and 'excel_filename' in st.session_state:
        st.download_button(
            label="Descargar Informe Excel ‚¨áÔ∏è",
            data=st.session_state.excel_output,
            file_name=st.session_state.excel_filename,
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            help="Haz clic para descargar el archivo Excel generado."
        )
    else:
        st.error("No se encontr√≥ el archivo Excel. Por favor, regresa y genera el informe nuevamente.")

    st.markdown("---")
    # Nuevo mensaje m√°s prominente para el env√≠o por correo
    st.warning("‚ö†Ô∏è **Recordatorio Importante:** Despu√©s de descargar el archivo Excel, debes enviarlo a **fse.scs** üìß.")
    st.info("üí° **Aclaraci√≥n:** Streamlit no permite ventanas emergentes que bloqueen la aplicaci√≥n para confirmaciones directas. Este mensaje es la forma m√°s clara de recordarte la acci√≥n post-descarga.")


    if st.button("Volver al Inicio (nueva evaluaci√≥n)"):
        st.session_state.clear() # Clear all session state to restart
        st.rerun()

# 7¬∫: Bot√≥n de salir del aplicativo
# Este se podr√≠a integrar en el footer o en un bot√≥n de "Cerrar Sesi√≥n" si se quiere una funcionalidad de logout expl√≠cita.
# Por ahora, un simple "Salir" desde cualquier punto reinicia la sesi√≥n (cierra la "sesi√≥n" de Streamlit).
st.sidebar.markdown("---")
if st.sidebar.button("Salir del Aplicativo üö™"):
    st.session_state.clear()
    st.rerun()

st.sidebar.markdown("---")
st.sidebar.markdown("##### ‚ÑπÔ∏è Informaci√≥n del Aplicativo")
st.sidebar.write("Versi√≥n: 1.0")
st.sidebar.write("Desarrollado para: F.S.E. ‚Äì S.C.S.")
st.sidebar.write("Fecha: Julio 2025")